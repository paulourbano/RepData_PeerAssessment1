qplot(votes, rating, data = movies) + geom_smooth()
?llines()
library
library(UsingR)
data(father.son)
x = father.son$fheight
(mean(x) + c(-1,1) * qnorm(0.975) * sd(x)/sqrt(length(x)))/12
(mean(x) + c(-1,1) * qnorm(0.975) * sd(x)/sqrt(length(x)))
poisson.test(10, T=60)$conf
round(poisson.test(10, T=60)$conf, 3)
round(poisson.test(10*60, T=1)$conf, 3)
x = 10
t = 60
lambda = x/t
lambda + c(-1,1) * qnorm(0.975) * sqrt(lambda/t)
round(poisson.test(10, T=60)$conf, 3)
round(poisson.test(10*60, T=1)$conf, 3)
pnorm(70, mean=80, sd=10)
1100 + 1.96*75
pbinom(4, size=5, prob=.5, lower.tail=F)
pbinom(5, size=5, prob=.5, lower.tail=F)
pbinom(3, size=5, prob=.5, lower.tail=F)
pbinom(3, size=5, prob=.5, lower.tail=T)
?pbinom
1/12
?ppois
ppois(10, 5*3)
3.5*3.5
15.17 - 12.25
?qnorm
ppois(16, lambda=15, lower.tail=T)
x = ppois(16, lambda=15, lower.tail=T)
y = ppois(14, lambda=15, lower.tail=T)
x-y
?qnorm()
qnorm(-1)
qnorm(0.5)
qnorm(1.5)
qnorm(.75)
qnorm(.95)
qnorm(.9)
qnorm(.99)
qnorm(.95, mean=1100, sd=75)
1/(2*sqrt(3))
library(UsingR)
?t.test
1100 + c(-1, 1) * qt(.975, n - 1) * (S / sqrt(n))
S = 30
n = 9
1100 + c(-1, 1) * qt(.975, n - 1) * (S / sqrt(n))
1100 + c(-1, 1) * qt(.95, n - 1) * (S / sqrt(n))
1100 + c(-1, 1) * qt(.975, n - 1) * (S / sqrt(n))
1100 + round(c(-1, 1) * qt(.975, n - 1) * (S / sqrt(n)))
1100 + round(c(-1, 1) * qt(.95, n - 1) * (S / sqrt(n)))
?qt
6/qt(0.975, 8)
nsSampleSize = 10
nsVariance = 0.6 # unit hours
nsStandardDeviation = sqrt(0.6)
nsAverage = 3 # unit hours
nsInterval = nsAverage + c(-1, 1) * qt(0.975, nsSampleSize - 1) * (nsStandardDeviation/sqrt(nsSampleSize))
nsInterval
osSampleSize = 10
osVariance = 0.68 # unit hours
osStandardDeviation = sqrt(osVariance)
osAverage = 5 # unit hours
osInterval = osAverage + c(-1, 1) * qt(0.975, osSampleSize - 1) * (osStandardDeviation/sqrt(osSampleSize))
osInterval
nsInterval - osInterval
tdfNum = (osVariance/osSampleSize + nsVariance/nsSampleSize)^2
tdfDenomP1 = ((osVariance/osSampleSize)^2) / (osSampleSize - 1)
tdfDenomP2 = ((nsVariance/nsSampleSize)^2) / (nsSampleSize - 1)
tdf =  tdfNum / (tdfDenomP1 + tdfDenomP2)
tdf
finalTerm = sqrt((osVariance/osSampleSize) + (nsVariance/nsSampleSize))
interval = (nsAverage - osAverage) + c(-1,1) * tdf * finalTerm
interval
interval = (-nsAverage + osAverage) + c(-1,1) * tdf * finalTerm
interval
interval = (nsAverage - osAverage) + c(-1,1) * qt(0.975, tdf) * finalTerm
interval
round(interval, 2)
?zt
?qz
?qn
?qnormal
?qnorm
nsSampleSize = 100
nsStandardDeviation = 0.5
nsVariance = nsStandardDeviation^2
nsAverage = 4 # unit hours
osSampleSize = 100
osStandardDeviation = 2
osVariance = osStandardDeviation^2
osAverage = 6 # unit hours
tdfNum = (osVariance/osSampleSize + nsVariance/nsSampleSize)^2
tdfDenomP1 = ((osVariance/osSampleSize)^2) / (osSampleSize - 1)
tdfDenomP2 = ((nsVariance/nsSampleSize)^2) / (nsSampleSize - 1)
tdf =  tdfNum / (tdfDenomP1 + tdfDenomP2)
finalTerm = sqrt((osVariance/osSampleSize) + (nsVariance/nsSampleSize))
interval = (nsAverage - osAverage) + c(-1,1) * qnorm(0.975, tdf) * finalTerm
interval
interval = (osAverage - nsAverage) + c(-1,1) * qnorm(0.975, tdf) * finalTerm
interval
interval = (osAverage - nsAverage) + c(-1,1) * qt(0.975, tdf) * finalTerm
interval
interval = (nsAverage - osAverage) + c(-1,1) * qt(0.975, tdf) * finalTerm
interval
interval = (osAverage - nsAverage) + c(-1,1) * qt(0.975, tdf) * finalTerm
interval
qnorm(.975, lower.tail=FALSE)
?qt
interval = (osAverage - nsAverage) + c(-1,1) * qnorm(0.975) * finalTerm
interval
tsSampleSize = 9
tsStandardDeviation = 1.5
tsVariance = nsStandardDeviation^2
tsAverage = -3 # unit kg/m^2
psSampleSize = 9
psStandardDeviation = 1.8
psVariance = osStandardDeviation^2
psAverage = 1 # unit hours
sp = sqrt(( (tsSampleSize - 1) * tsStandardDeviation + (psSampleSize - 1) * psStandardDeviation) / (tsSampleSize + psSampleSize - 2) )
finalTerm = sqrt((1/tsSampleSize) + (1/tsSampleSize))
interval = (tsAverage - psAverage) + c(-1, 1) * qt(tsSampleSize + psSampleSize - 2) * sp * finalTerm
interval = (tsAverage - psAverage) + c(-1, 1) * qt(0.975, tsSampleSize + psSampleSize - 2) * sp * finalTerm
interval
round(interval, 3)
interval = (tsAverage - psAverage) + c(-1, 1) * qt(0.9, tsSampleSize + psSampleSize - 2) * sp * finalTerm
round(interval, 3)
interval = (tsAverage - psAverage) + c(-1, 1) * qt(0.95, tsSampleSize + psSampleSize - 2) * sp * finalTerm
round(interval, 3)
sp = sqrt(( (tsSampleSize - 1) * tsStandardDeviation^2 + (psSampleSize - 1) * psStandardDeviation^2) / (tsSampleSize + psSampleSize - 2) )
finalTerm = sqrt((1/tsSampleSize) + (1/tsSampleSize))
interval = (tsAverage - psAverage) + c(-1, 1) * qt(0.95, tsSampleSize + psSampleSize - 2) * sp * finalTerm
round(interval, 3)
?apply
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE), nosim), 1, mean, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE), nosim), 1, mean, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE), nosim), 1, mean, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
nosim <- 1000
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE), nosim), 1, mean, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE), nosim), 1, mean, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE), nosim), 1, mean, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
View(dat)
?matrix
nosim <- 10000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(rexp(nosim*10, lambda), nosim), 1, mean),
apply(matrix(rexp(nosim*20, lambda), nosim), 1, mean),
apply(matrix(rexp(nosim*30, lambda), nosim), 1, mean)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
View(dat)
nrow(subset(dat, size==10))
nrow(subset(dat, size==20))
nrow(subset(dat, size==30))
rexp(10,.2)
matrix(rexp(5,.2),5)
matrix(rexp(10,.2),5)
nosim <- 10000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(rexp(nosim, lambda), nosim), 1, mean),
apply(matrix(rexp(nosim, lambda), nosim), 1, mean),
apply(matrix(rexp(nosim, lambda), nosim), 1, mean)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
rexp(40,.2)
dat = data.frame(1:nosim)
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(1:nosim)
View(dat)
dat = data.frame(number.simulation=1:nosim)
View(dat)
dat$mean = rexp(40, lambda)
View(dat)
dat$mean = mean(rexp(40, lambda))
View(dat)
?apply
dat$mean = apply(dat$mean, 1, function (x) mean(rexp(40, lambda)))
dat$mean = lapply(dat$mean, function (x) mean(rexp(40, lambda)))
View(dat)
hist(dat$mean)
class(dat$mean)
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
library(ggplot2)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(number.simulation=1:nosim)
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
#hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(number.simulation=1:nosim)
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
#hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(number.simulation=1:nosim)
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
#hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
hist(dat$mean)
summary(dat)
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
g <- g + stat_function(fun = dnorm, size = 12)
#g + facet_grid(. ~ size)
g
dnorm(5,1)
g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
rnorm(n=nosim, mean=5, sd=1)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = rnorm(n=nosim, mean=5, sd=1), size = 2)
#g + facet_grid(. ~ size)
g
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = rnorm, size = 2)
#g + facet_grid(. ~ size)
g
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
#g + facet_grid(. ~ size)
g
library(ggplot2)
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = function(x), size = 2)
#g + facet_grid(. ~ size)
g
nosim <- 1000
lambda = .2
#cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
hist(dat$mean)
g <- ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
#g <- g + stat_function(fun = function(x), size = 2)
#g + facet_grid(. ~ size)
g
nosim <- 1000
lambda = .2
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
hist(dat$mean)
ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
nosim <- 1000
nosim <- 1000
nosim <- 1000
nosim <- 1000
nosim <- 1000
lambda = .2
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
nosim <- 1000
lambda = .2
dat = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
dat$size = nosim
nosim <- 10000
lambda = .2
dat2 = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat2$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
dat2$size = nosim
nosim <- 100000
lambda = .2
dat3 = data.frame(number.simulation=1:nosim, mean=rep(0, nosim))
dat3$mean = sapply(dat$mean, function (x) mean(rexp(40, lambda)))
dat3$size = nosim
ggplot(dat, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
ggplot(dat2, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
ggplot(dat3, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
mergeDF = rbind(dat, rbind(dat2, dat3))
mergeDF$size = as.factor(mergeDF$size)
ggplot(mergeDF, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
g = ggplot(mergeDF, aes(x = mean)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
g = g + facet_grid(. ~ size)
g
g = ggplot(mergeDF, aes(x = mean, fill=size)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..))
g = g + facet_grid(. ~ size)
g
var(subset(mergeDF, size == 1000))
var(subset(mergeDF$mean, size == 1000))
var(subset(mergeDF, size == 1000)$mean)
var(subset(mergeDF, size == 1000)$mean)
x = data.frame(sim=1:10, var=rep(0,10))
x
x$var = sapply(x$var, function(x) var(rexp(40, .02)))
x
x$var = sapply(x$var, function(x) var(rexp(1000, .02)))
x
rexp(10, .2)
var(rexp(10, .2))
var(rexp(20, .2))
var(rexp(30, .2))
var(rexp(40, .2))
var(rexp(50, .2))
var(rexp(100, .2))
var(rexp(1000, .2))
var(rexp(10000, .2))
var(rexp(100000, .2))
var(rexp(1000000, .2))
n <- 40;
pvals <- seq(.1, .9, by = .05);
nosim <- 1000
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
library(ggplot2)
n <- 40;
lambda = .2
nosim <- 1000
dat = data.frame(number.simulation=1:nosim, coverage=rep(0, nosim))
dat$coverage = sapply(dat$coverage, function(x){
simData = rexp(n, lambda)
ll <- mean(simData) - 1.96 * (var(simData) / sqrt(n))
ul <- mean(simData) + 1.96 * (var(simData) / sqrt(n))
mean(ll < p & ul > p)
})
n <- 40;
lambda = .2
nosim <- 1000
dat = data.frame(number.simulation=1:nosim, coverage=rep(0, nosim))
dat$coverage = sapply(dat$coverage, function(x){
simData = rexp(n, lambda)
ll <- mean(simData) - 1.96 * (var(simData) / sqrt(n))
ul <- mean(simData) + 1.96 * (var(simData) / sqrt(n))
mean(ll < simData & ul > simData)
})
ggplot(dat, aes(x = number.simulation, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(.75, 1.0)
n <- 40;
lambda = .2
nosim <- 100000
dat = data.frame(number.simulation=1:nosim, coverage=rep(0, nosim))
dat$coverage = sapply(dat$coverage, function(x){
simData = rexp(n, lambda)
ll <- mean(simData) - 1.96 * (var(simData) / sqrt(n))
ul <- mean(simData) + 1.96 * (var(simData) / sqrt(n))
mean(ll < simData & ul > simData)
})
ggplot(dat, aes(x = number.simulation, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(.75, 1.0)
n <- 40;
lambda = .2
nosim <- 100000
dat = data.frame(number.simulation=1:nosim, coverage=rep(0, nosim))
dat$coverage = sapply(dat$coverage, function(x){
simData = rexp(n, lambda)
ll <- mean(simData) - 1.96 * (var(simData) / sqrt(n))
ul <- mean(simData) + 1.96 * (var(simData) / sqrt(n))
mean(ll < simData & ul > simData)
})
simData = rexp(n, lambda)
ll <- mean(simData) - 1.96 * (var(simData) / sqrt(n))
ul <- mean(simData) + 1.96 * (var(simData) / sqrt(n))
simdata[simData > 0]
simData[simData > 0]
simData[simData > ll & simData < ul]
length(simData[simData > ll & simData < ul])/length(simData)
data(ToothGrowth)
ToothGrowth$len
ToothGrowth$supp
ToothGrowth$dose
nrow(ToothGrowth)
t.test(data=ToothGrowth, len ~ supp + dose, paired=F)$conf
t.test(len ~ supp, paired=F, data=ToothGrowth)$conf
t.test(len ~ dose, paired=F, data=ToothGrowth)$conf
t.test(len ~ dose, paired=F, data=ToothGrowth)
t.test(len ~ supp, paired=F, data=ToothGrowth)$conf
x = c(0.18, -1.54, 0.42, 0.95)
w = c(2, 1, 3, 1)
u = c(.0025, .3, .1471, 1.077)
result = c(numeric(0))
for (i in range(length(u))) {
sum = 0
for (j in range(length(w))) {
sum = sum + w[j]*((x[j] - u[i])^2)
}
result = c(result, sum)
}
rbind(u, result)
length(u)
range(length(u))
x = c(0.18, -1.54, 0.42, 0.95)
w = c(2, 1, 3, 1)
u = c(.0025, .3, .1471, 1.077)
result = c(numeric(0))
for (i in 1:length(u)) {
sum = 0
for (j in 1:length(w)) {
sum = sum + w[j]*((x[j] - u[i])^2)
}
result = c(result, sum)
}
rbind(u, result)
x=c(2,2,2)
y=c(2,3,4)
x*y
sum(x*y)
sum(y*y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
slope = sum(x*y)/sum(x*x)
slope
data(mtcars)
lm(data=mtcars, mpg ~ weight)
mtcars
lm(data=mtcars, mpg ~ wt)
x = x - mean(x)
x
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
u = mean(x)
sdX = sd(x)
x = (x - u)/sdX
mean(x)
sd(x)
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
w = c(1, 1, 1, 1)
u = c(.573, .8, .36, .44)
result = c(numeric(0))
for (i in 1:length(u)) {
sum = 0
for (j in 1:length(w)) {
sum = sum + w[j]*((x[j] - u[i])^2)
}
result = c(result, sum)
}
rbind(u, result)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
setwd("/Volumes/untitled/Downloads/deleteme/RepData_PeerAssessment1")
